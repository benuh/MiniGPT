{"ast":null,"code":"var _jsxFileName = \"/Users/benjaminhu/Desktop/Benjamin/Projects/Github/MiniGPT/frontend/src/contexts/NotificationContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\nimport TailwindNotification from '../components/TailwindNotification';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NotificationContext = /*#__PURE__*/createContext();\nexport const useNotification = () => {\n  _s();\n  const context = useContext(NotificationContext);\n  if (!context) {\n    throw new Error('useNotification must be used within a NotificationProvider');\n  }\n  return context;\n};\n_s(useNotification, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const NotificationProvider = ({\n  children\n}) => {\n  _s2();\n  const [notifications, setNotifications] = useState([]);\n  const showNotification = (message, severity = 'info', duration = 4000) => {\n    const id = Date.now();\n    const notification = {\n      id,\n      message,\n      severity,\n      duration,\n      open: true\n    };\n    setNotifications(prev => [...prev, notification]);\n\n    // Auto-hide notification after duration\n    if (duration > 0) {\n      setTimeout(() => {\n        hideNotification(id);\n      }, duration);\n    }\n    return id;\n  };\n  const hideNotification = id => {\n    setNotifications(prev => prev.map(notification => notification.id === id ? {\n      ...notification,\n      open: false\n    } : notification));\n\n    // Remove notification after animation\n    setTimeout(() => {\n      setNotifications(prev => prev.filter(notification => notification.id !== id));\n    }, 300);\n  };\n  const showSuccess = (message, duration) => {\n    return showNotification(message, 'success', duration);\n  };\n  const showError = (message, duration) => {\n    return showNotification(message, 'error', duration);\n  };\n  const showWarning = (message, duration) => {\n    return showNotification(message, 'warning', duration);\n  };\n  const showInfo = (message, duration) => {\n    return showNotification(message, 'info', duration);\n  };\n  const clearAll = () => {\n    setNotifications([]);\n  };\n  const value = {\n    showNotification,\n    showSuccess,\n    showError,\n    showWarning,\n    showInfo,\n    hideNotification,\n    clearAll\n  };\n  return /*#__PURE__*/_jsxDEV(NotificationContext.Provider, {\n    value: value,\n    children: [children, /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fixed top-4 right-4 z-50 space-y-2\",\n      children: notifications.map((notification, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          transform: `translateY(${index * 72}px)`\n        },\n        children: /*#__PURE__*/_jsxDEV(TailwindNotification, {\n          message: notification.message,\n          type: notification.severity,\n          duration: notification.duration,\n          onClose: () => hideNotification(notification.id),\n          isVisible: notification.open\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this)\n      }, notification.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n_s2(NotificationProvider, \"/HH3zTd3BUNOgnlhD79kguSWbWM=\");\n_c = NotificationProvider;\nvar _c;\n$RefreshReg$(_c, \"NotificationProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","TailwindNotification","jsxDEV","_jsxDEV","NotificationContext","useNotification","_s","context","Error","NotificationProvider","children","_s2","notifications","setNotifications","showNotification","message","severity","duration","id","Date","now","notification","open","prev","setTimeout","hideNotification","map","filter","showSuccess","showError","showWarning","showInfo","clearAll","value","Provider","className","index","style","transform","type","onClose","isVisible","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/benjaminhu/Desktop/Benjamin/Projects/Github/MiniGPT/frontend/src/contexts/NotificationContext.js"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\nimport TailwindNotification from '../components/TailwindNotification';\n\nconst NotificationContext = createContext();\n\nexport const useNotification = () => {\n  const context = useContext(NotificationContext);\n  if (!context) {\n    throw new Error('useNotification must be used within a NotificationProvider');\n  }\n  return context;\n};\n\nexport const NotificationProvider = ({ children }) => {\n  const [notifications, setNotifications] = useState([]);\n\n  const showNotification = (message, severity = 'info', duration = 4000) => {\n    const id = Date.now();\n    const notification = {\n      id,\n      message,\n      severity,\n      duration,\n      open: true,\n    };\n\n    setNotifications(prev => [...prev, notification]);\n\n    // Auto-hide notification after duration\n    if (duration > 0) {\n      setTimeout(() => {\n        hideNotification(id);\n      }, duration);\n    }\n\n    return id;\n  };\n\n  const hideNotification = (id) => {\n    setNotifications(prev =>\n      prev.map(notification =>\n        notification.id === id\n          ? { ...notification, open: false }\n          : notification\n      )\n    );\n\n    // Remove notification after animation\n    setTimeout(() => {\n      setNotifications(prev =>\n        prev.filter(notification => notification.id !== id)\n      );\n    }, 300);\n  };\n\n  const showSuccess = (message, duration) => {\n    return showNotification(message, 'success', duration);\n  };\n\n  const showError = (message, duration) => {\n    return showNotification(message, 'error', duration);\n  };\n\n  const showWarning = (message, duration) => {\n    return showNotification(message, 'warning', duration);\n  };\n\n  const showInfo = (message, duration) => {\n    return showNotification(message, 'info', duration);\n  };\n\n  const clearAll = () => {\n    setNotifications([]);\n  };\n\n  const value = {\n    showNotification,\n    showSuccess,\n    showError,\n    showWarning,\n    showInfo,\n    hideNotification,\n    clearAll,\n  };\n\n  return (\n    <NotificationContext.Provider value={value}>\n      {children}\n\n      {/* Render notifications */}\n      <div className=\"fixed top-4 right-4 z-50 space-y-2\">\n        {notifications.map((notification, index) => (\n          <div\n            key={notification.id}\n            style={{ transform: `translateY(${index * 72}px)` }}\n          >\n            <TailwindNotification\n              message={notification.message}\n              type={notification.severity}\n              duration={notification.duration}\n              onClose={() => hideNotification(notification.id)}\n              isVisible={notification.open}\n            />\n          </div>\n        ))}\n      </div>\n    </NotificationContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}