{"ast":null,"code":"var _jsxFileName = \"/Users/benjaminhu/Desktop/Benjamin/Projects/Github/MiniGPT/frontend/src/contexts/ApiContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ApiContext = /*#__PURE__*/createContext();\nexport const useApi = () => {\n  _s();\n  const context = useContext(ApiContext);\n  if (!context) {\n    throw new Error('useApi must be used within an ApiProvider');\n  }\n  return context;\n};\n_s(useApi, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const ApiProvider = ({\n  children\n}) => {\n  _s2();\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n  const apiCall = async (endpoint, options = {}) => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n        headers: {\n          'Content-Type': 'application/json',\n          ...options.headers\n        },\n        ...options\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      return data;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Training API methods\n  const startTraining = async config => {\n    return apiCall('/api/training/start', {\n      method: 'POST',\n      body: JSON.stringify(config)\n    });\n  };\n  const stopTraining = async () => {\n    return apiCall('/api/training/stop', {\n      method: 'POST'\n    });\n  };\n  const getTrainingStatus = async () => {\n    return apiCall('/api/training/status');\n  };\n  const getTrainingProgress = async () => {\n    return apiCall('/api/training/progress');\n  };\n\n  // Model API methods\n  const getModels = async () => {\n    return apiCall('/api/models');\n  };\n  const deleteModel = async modelId => {\n    return apiCall(`/api/models/${modelId}`, {\n      method: 'DELETE'\n    });\n  };\n  const deployModel = async modelId => {\n    return apiCall(`/api/models/${modelId}/deploy`, {\n      method: 'POST'\n    });\n  };\n  const downloadModel = async modelId => {\n    return apiCall(`/api/models/${modelId}/download`);\n  };\n\n  // Chat API methods\n  const sendMessage = async (message, config = {}) => {\n    return apiCall('/api/chat', {\n      method: 'POST',\n      body: JSON.stringify({\n        message,\n        model: config.model || 'MiniGPT-v2',\n        temperature: config.temperature || 0.7,\n        max_tokens: config.max_tokens || 150\n      })\n    });\n  };\n  const getChatHistory = async () => {\n    return apiCall('/api/chat/history');\n  };\n  const clearChatHistory = async () => {\n    return apiCall('/api/chat/clear', {\n      method: 'POST'\n    });\n  };\n\n  // Dataset API methods\n  const getDatasets = async () => {\n    return apiCall('/api/datasets');\n  };\n  const uploadDataset = async (file, metadata) => {\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('metadata', JSON.stringify(metadata));\n    return apiCall('/api/datasets/upload', {\n      method: 'POST',\n      headers: {},\n      body: formData\n    });\n  };\n  const deleteDataset = async datasetId => {\n    return apiCall(`/api/datasets/${datasetId}`, {\n      method: 'DELETE'\n    });\n  };\n  const downloadDataset = async datasetId => {\n    return apiCall(`/api/datasets/${datasetId}/download`);\n  };\n\n  // Dashboard API methods\n  const getDashboardStats = async () => {\n    return apiCall('/api/dashboard/stats');\n  };\n  const getRecentActivity = async () => {\n    return apiCall('/api/dashboard/activity');\n  };\n  const value = {\n    isLoading,\n    error,\n    setError,\n    // Training methods\n    startTraining,\n    stopTraining,\n    getTrainingStatus,\n    getTrainingProgress,\n    // Model methods\n    getModels,\n    deleteModel,\n    deployModel,\n    downloadModel,\n    // Chat methods\n    sendMessage,\n    getChatHistory,\n    clearChatHistory,\n    // Dataset methods\n    getDatasets,\n    uploadDataset,\n    deleteDataset,\n    downloadDataset,\n    // Dashboard methods\n    getDashboardStats,\n    getRecentActivity\n  };\n  return /*#__PURE__*/_jsxDEV(ApiContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 182,\n    columnNumber: 5\n  }, this);\n};\n_s2(ApiProvider, \"vj++RuHna9NxFPGCY0p/mi1GZNM=\");\n_c = ApiProvider;\nvar _c;\n$RefreshReg$(_c, \"ApiProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","ApiContext","useApi","_s","context","Error","ApiProvider","children","_s2","isLoading","setIsLoading","error","setError","API_BASE_URL","process","env","REACT_APP_API_URL","apiCall","endpoint","options","response","fetch","headers","ok","status","data","json","err","message","startTraining","config","method","body","JSON","stringify","stopTraining","getTrainingStatus","getTrainingProgress","getModels","deleteModel","modelId","deployModel","downloadModel","sendMessage","model","temperature","max_tokens","getChatHistory","clearChatHistory","getDatasets","uploadDataset","file","metadata","formData","FormData","append","deleteDataset","datasetId","downloadDataset","getDashboardStats","getRecentActivity","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/benjaminhu/Desktop/Benjamin/Projects/Github/MiniGPT/frontend/src/contexts/ApiContext.js"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\n\nconst ApiContext = createContext();\n\nexport const useApi = () => {\n  const context = useContext(ApiContext);\n  if (!context) {\n    throw new Error('useApi must be used within an ApiProvider');\n  }\n  return context;\n};\n\nexport const ApiProvider = ({ children }) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\n  const apiCall = async (endpoint, options = {}) => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n        headers: {\n          'Content-Type': 'application/json',\n          ...options.headers,\n        },\n        ...options,\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      return data;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Training API methods\n  const startTraining = async (config) => {\n    return apiCall('/api/training/start', {\n      method: 'POST',\n      body: JSON.stringify(config),\n    });\n  };\n\n  const stopTraining = async () => {\n    return apiCall('/api/training/stop', {\n      method: 'POST',\n    });\n  };\n\n  const getTrainingStatus = async () => {\n    return apiCall('/api/training/status');\n  };\n\n  const getTrainingProgress = async () => {\n    return apiCall('/api/training/progress');\n  };\n\n  // Model API methods\n  const getModels = async () => {\n    return apiCall('/api/models');\n  };\n\n  const deleteModel = async (modelId) => {\n    return apiCall(`/api/models/${modelId}`, {\n      method: 'DELETE',\n    });\n  };\n\n  const deployModel = async (modelId) => {\n    return apiCall(`/api/models/${modelId}/deploy`, {\n      method: 'POST',\n    });\n  };\n\n  const downloadModel = async (modelId) => {\n    return apiCall(`/api/models/${modelId}/download`);\n  };\n\n  // Chat API methods\n  const sendMessage = async (message, config = {}) => {\n    return apiCall('/api/chat', {\n      method: 'POST',\n      body: JSON.stringify({\n        message,\n        model: config.model || 'MiniGPT-v2',\n        temperature: config.temperature || 0.7,\n        max_tokens: config.max_tokens || 150,\n      }),\n    });\n  };\n\n  const getChatHistory = async () => {\n    return apiCall('/api/chat/history');\n  };\n\n  const clearChatHistory = async () => {\n    return apiCall('/api/chat/clear', {\n      method: 'POST',\n    });\n  };\n\n  // Dataset API methods\n  const getDatasets = async () => {\n    return apiCall('/api/datasets');\n  };\n\n  const uploadDataset = async (file, metadata) => {\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('metadata', JSON.stringify(metadata));\n\n    return apiCall('/api/datasets/upload', {\n      method: 'POST',\n      headers: {},\n      body: formData,\n    });\n  };\n\n  const deleteDataset = async (datasetId) => {\n    return apiCall(`/api/datasets/${datasetId}`, {\n      method: 'DELETE',\n    });\n  };\n\n  const downloadDataset = async (datasetId) => {\n    return apiCall(`/api/datasets/${datasetId}/download`);\n  };\n\n  // Dashboard API methods\n  const getDashboardStats = async () => {\n    return apiCall('/api/dashboard/stats');\n  };\n\n  const getRecentActivity = async () => {\n    return apiCall('/api/dashboard/activity');\n  };\n\n  const value = {\n    isLoading,\n    error,\n    setError,\n\n    // Training methods\n    startTraining,\n    stopTraining,\n    getTrainingStatus,\n    getTrainingProgress,\n\n    // Model methods\n    getModels,\n    deleteModel,\n    deployModel,\n    downloadModel,\n\n    // Chat methods\n    sendMessage,\n    getChatHistory,\n    clearChatHistory,\n\n    // Dataset methods\n    getDatasets,\n    uploadDataset,\n    deleteDataset,\n    downloadDataset,\n\n    // Dashboard methods\n    getDashboardStats,\n    getRecentActivity,\n  };\n\n  return (\n    <ApiContext.Provider value={value}>\n      {children}\n    </ApiContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}